name: Pull Request Comment

# The workflow to execute on is comments that are newly created
on:
  issue_comment:
    types: [created]

# Permissions needed for reacting and adding comments for IssueOps commands
permissions:
  pull-requests: write
  deployments: write
  contents: write

jobs:
  deployment:
    if: ${{ github.event.issue.pull_request }} # only run on pull request comments
    runs-on: ubuntu-latest
    steps:
      # Execute IssueOps branch deployment logic, hooray!
      # This will be used to "gate" all future steps below and conditionally trigger steps/deployments
      - uses: github/branch-deploy@v3.0.2
        id: branch-deploy
        with:
          trigger: ".deploy"
          environment_targets: "qa1,qa2,production"
      # Checkout your projects repository based on the ref provided by the branch-deploy step
      # - uses: actions/checkout@v2.5.0
      #   with:
      #     ref: ${{ steps.branch-deploy.outputs.ref }}


      # Do some fake "noop" deployment logic here
      # conditionally run a noop deployment
      # - name: fake noop deploy
      #   if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
      #   run: echo "I am doing a fake noop deploy"

      # # Do some fake "regular" deployment logic here
      # # conditionally run a regular deployment
      # - name: fake regular deploy
      #   if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
      #   run: echo "I am doing a fake regular deploy"



      # - uses: jungwinter/split@v2
      #   id: split
      #   with:
      #     msg: ${{ github.event.comment.body }}
      # - name: get pull request ref
      #   id: get_pull_request_ref
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: GET /repos/:repository/pulls/:issue_id
      #     repository: ${{ github.repository }}
      #     issue_id: ${{ github.event.issue.number }}
      #   env:
      #     GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    # outputs:
    #   git_ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
    #   environment_name: ${{ steps.split.outputs._1 }}

  # runDeploymentWorkflow:
  #   uses: tittletech/demo/.github/workflows/workflow_deployment.yml@main
  #   needs: cciParams
  #   with:
  #     environment_name: ${{ needs.cciParams.outputs.environment_name }}
  #     git_ref: ${{ needs.cciParams.outputs.git_ref }}
  #   secrets:
  #     auth_token: ${{ secrets.CCI_TOKEN }}


      - name: Deploy Via CURL
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        run: |
          curl \
          --request POST \
          --url https://circleci.com/api/v2/project/gh/${{ github.repository }}/pipeline \
          --header "Circle-Token: ${{ secrets.CCI_TOKEN }}" \
          --header "content-type: application/json" \
          --header "x-attribution-login: ${{ github.actor }}" \
          --header "x-attribution-actor-id: ${{ github.actor }}" \
          --data '{"branch":"${{ steps.branch-deploy.outputs.ref }}","parameters":{"GHA_Actor":"whatisdot","GHA_Action":"my_action","GHA_Event":"push","GHA_Meta":"echo TOAST"}}'



      # - name: Deploying somebranch to qa1 with CircleCI Pipeline
      #   if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
      #   uses: CircleCI-Public/trigger-circleci-pipeline-action@v1.0.5
      #   with:
      #     GHA_Meta: echo "Deploying somebranch to qa1..."
      #   env:
      #     CCI_TOKEN: ${{ secrets.CCI_TOKEN }}
      #   outputs:


      # - name: create deployment
      #   if: steps.split.outputs._0 == '/deploy'
      #   id: create_deployment
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: POST /repos/:repository/deployments
      #     repository: ${{ github.repository }}
      #     ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
      #     environment: ${{ steps.split.outputs._1 }}
      #     auto_merge: false
      #   env:
      #     GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

